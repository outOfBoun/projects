// VOICU Alex-Georgian

						Tema 3 APD



			Timpi (secunde) de rulare si scalabilitate:


		1. PGM (rorschach.pgm cu bssembssem):

				| Run 1		Run 2		Run 3		| Mean

	Single process		| 2.813		2.816		2.805		| 2.811

	MPI (n = 2)		| 2.980		2.943		2.947		| 2.956

	MPI (n = 3)		| 2.079		2.066		2.081		| 2.075

	MPI (n = 4)		| 1.810		1.838		1.809		| 1.819


		2. PNM (landscape.pnm cu bssembssem):

				| Run 1		Run 2		Run 3		| Mean

	Single process		| 7.769		7.975		7.860		| 7.868

	MPI (n = 2)		| 8.281		8.356		8.246		| 8.294

	MPI (n = 3)		| 5.183		5.259		5.137		| 5.193

	MPI (n = 4)		| 4.158		4.102		4.120		| 4.126



			Descriere implementare:


		Algoritmul si scalarea acestuia au depins de felul in care este stocata imaginea 
in program. Astfel, intrucat spatiul este o matrice alocata dinamic de forma char**, metoda 
cea mai simpla dar si eficienta de impartire a imaginii este in benzi orizontale. 

		Optimizarile hardware precum caching-ul faciliteaza prelucrarea si transmiterea 
zonelor contigue de memorie, deci o impartire mai eficienta teoretic, precum cea in zone 
cat mai patrate (minimizarea bordurilor comune) ar avea penalitati de viteza in realitate.


		Algoritmul paralelizat decurge in felul urmator:

	- main-ul da fiecarui worker zona lui din imagine, plus o bordura superioara si inferioara
(de care este nevoie pentru aplicarea filtrului);
	
	- main-ul transmite ce filtru va fi folosit;

	- fiecare worker aplica filtrul pentru bucata sa;

	- main-ul face update la noile borduri printr-un request la prima si ultima linie a fiecarui 
worker, pentru ca apoi sa retransmita vecinilor sai bordurile modificate;

		! in acest mod eficientizam aplicarile intermediare de filtre prin faptul ca nu retransmitem 
		la fiecare aplicare de filtru intreaga portiune, ci doar marginile !

	- main-ul va relua operatia aplicarii unui nou filtru sau va cere portiunile de la workeri;

	- main-ul va initia o noua imagine (de exemplu la pnm se initiaza urmatorul canal de culoare) 
sau va trimite mesajul de shutdown workerilor.
